/* Generated by AN DISI Unibo */ 
package it.unibo.rover;
import alice.tuprolog.SolveInfo;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.iot.configurator.Configurator;
import it.unibo.iot.executors.baseRobot.IBaseRobot; 
import it.unibo.iot.models.sensorData.distance.IDistanceSensorData;
import it.unibo.iot.models.sensorData.impact.IImpactSensorData;
import it.unibo.iot.models.sensorData.line.ILineSensorData;
import it.unibo.iot.models.sensorData.magnetometer.IMagnetometerSensorData;
import it.unibo.iot.sensors.ISensor; 
import it.unibo.iot.sensors.ISensorObserver;
import it.unibo.iot.sensors.distanceSensor.DistanceSensor;
import it.unibo.iot.sensors.impactSensor.ImpactSensor;
import it.unibo.iot.sensors.lineSensor.LineSensor;
import it.unibo.iot.sensors.magnetometerSensor.MagnetometerSensor;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;


class QaRobotActor extends it.unibo.qactor.robot.RobotActor{
	public QaRobotActor(
		String name, QActorContext ctx, String worldTheoryPath,
			IOutputEnvView outEnvView, String baserobot, String defaultPlan )  throws Exception{
		super(name, ctx, "./srcMore/it/unibo/rover/plans.txt", worldTheoryPath,
		outEnvView, it.unibo.qactor.robot.RobotSysKb.setRobotBase(ctx, baserobot) , defaultPlan);
	}
}

public class AbstractRover extends QaRobotActor { 
protected AsynchActionResult aar = null;
protected boolean actionResult = true;
protected alice.tuprolog.SolveInfo sol;
//protected IMsgQueue mysupport ;  //defined in QActor
protected String planFilePath    = null;
protected String terminationEvId = "default";
protected String parg="";
protected boolean bres=false;
protected IActorAction  action;

		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}


	public AbstractRover(String actorId, QActorContext myCtx, IOutputEnvView outEnvView ,String baserobot)  throws Exception{
		super(actorId, myCtx,  
		"./srcMore/it/unibo/rover/WorldTheory.pl",
		setTheEnv( outEnvView ) ,baserobot , "init");		
		this.planFilePath = "./srcMore/it/unibo/rover/plans.txt";
		//Plan interpretation is done in Prolog
		//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
 	}
	@Override
	protected void doJob() throws Exception {
		String name  = getName().replace("_ctrl", "");
		mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
 		initSensorSystem();
		boolean res = init();
		//println(getName() + " doJob " + res );
		QActorContext.terminateQActorSystem(this);
	} 
	/* 
	* ------------------------------------------------------------
	* PLANS
	* ------------------------------------------------------------
	*/
    public boolean init() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "init";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "init";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "\"[ROVER] STARTS\"";
    		println( temporaryStr );  
    		if( ! planUtils.switchToPlan("config").getGoon() ) break;
    		if( ! planUtils.switchToPlan("standby").getGoon() ) break;
    		//delay
    		aar = delayReactive(6000000,"" , "");
    		if( aar.getInterrupted() ) curPlanInExec   = "init";
    		if( ! aar.getGoon() ) break;
    		temporaryStr = "\"[ROVER] ENDS\"";
    		println( temporaryStr );  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=init WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean config() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "config";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "config";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//ReceiveMsg
    		 		aar = planUtils.receiveAMsg(mysupport,10000, "" , "" ); 	//could block
    			    if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			    	//println("	WARNING: receivemsg timeout " + aar.getTimeRemained());
    			    	addRule("tout(receivemsg,"+getName()+")");
    			    }
    		//onMsg
    		if( currentMessage.msgId().equals("daValue") ){
    			String parg="da(DA)";
    			/* AddRule */
    			parg = updateVars(Term.createTerm("daValue(DA)"),  Term.createTerm("daValue(DA)"), 
    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
    			if( parg != null ) addRule(parg);	    		  					
    		}//onMsg
    		if( currentMessage.msgId().equals("daValue") ){
    			String parg = "actorOp(setDa(DA))";
    			/* ActorOp */
    			parg =  updateVars( Term.createTerm("daValue(DA)"), Term.createTerm("daValue(DA)"), 
    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
    			if( parg != null ){
    				aar = solveGoalReactive(parg,3600000,"","");
    				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    				if( aar.getInterrupted() ){
    					curPlanInExec   = "config";
    					if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    					if( ! aar.getGoon() ) break;
    				} 			
    			}
    		}if( (guardVars = QActorUtils.evalTheGuard(this, " !?da(DA)" )) != null ){
    		temporaryStr = "daSettedAt(DA)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		println( temporaryStr );  
    		}
    		else{ if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
    		}parg = "actorOp(setAttemptRight(0))";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "config";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		parg = "actorOp(getRotationTimeRight)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "config";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,RTR)" )) != null ){
    		temporaryStr = "rotationTimeRight(RTR)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		addRule( temporaryStr );  
    		}
    		parg = "actorOp(getRotationTimeLeft)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "config";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,RTL)" )) != null ){
    		temporaryStr = "rotationTimeLeft(RTL)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		addRule( temporaryStr );  
    		}
    		parg = "actorOp(getSearchTimeForward)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "config";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,STF)" )) != null ){
    		temporaryStr = "searchTimeForward(STF)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		addRule( temporaryStr );  
    		}
    		parg = "actorOp(getSenseTimeFixedObstacle)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "config";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,STFO)" )) != null ){
    		temporaryStr = "senseTimeFixedObstacle(STFO)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		addRule( temporaryStr );  
    		}
    		parg = "actorOp(getFinalPointTollerance)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "config";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,FPT)" )) != null ){
    		temporaryStr = "finalPointTollerance(FPT)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		addRule( temporaryStr );  
    		}
    		//we should restore nPlanIter and curPlanInExec of the 'interrupted' plan ???
    		returnValue = continueWork;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=config WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean standby() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "standby";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "standby";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "\"[ROVER] waits to start.\"";
    		println( temporaryStr );  
    		//delay
    		aar = delayReactive(10000,"local_start,local_takeControl,local_alarm" , "handleStart,handleTakeControl,handleAlarm");
    		if( aar.getInterrupted() ) curPlanInExec   = "standby";
    		if( ! aar.getGoon() ) break;
    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=standby WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleStart() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "handleStart";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "handleStart";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( ! planUtils.switchToPlan("reachB").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleStart WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean reachB() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "reachB";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "reachB";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( ! planUtils.switchToPlan("goForward").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=reachB WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleTakeControl() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "handleTakeControl";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "handleTakeControl";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//stop
    		//if( ! execRobotMove("handleTakeControl","stop",0,0,0, "" , "") ) break;
    		    aar = execRobotMove("handleTakeControl","stop",0,0,0, "" , "");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "handleTakeControl";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		if( ! planUtils.switchToPlan("controlTaken").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleTakeControl WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean controlTaken() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "controlTaken";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "controlTaken";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//senseEvent
    		aar = planUtils.senseEvents( 10000,"local_ctrl","continue",
    		"local_releaseControl,local_alarm" , "handleReleaseControl,handleAlarmControl",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    		//onEvent
    		if( currentEvent.getEventId().equals("local_ctrl") ){
    		 		String parg = "";
    		 		/* SwitchPlan */
    		 		parg =  updateVars(  Term.createTerm("ctrl(CMD)"), Term.createTerm("ctrl(fwd)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ){
    		 				 if( ! planUtils.switchToPlan("ctrlForward").getGoon() ) break; 
    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
    		 }
    		//onEvent
    		if( currentEvent.getEventId().equals("local_ctrl") ){
    		 		String parg = "";
    		 		/* SwitchPlan */
    		 		parg =  updateVars(  Term.createTerm("ctrl(CMD)"), Term.createTerm("ctrl(bwd)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ){
    		 				 if( ! planUtils.switchToPlan("ctrlBackward").getGoon() ) break; 
    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
    		 }
    		//onEvent
    		if( currentEvent.getEventId().equals("local_ctrl") ){
    		 		String parg = "";
    		 		/* SwitchPlan */
    		 		parg =  updateVars(  Term.createTerm("ctrl(CMD)"), Term.createTerm("ctrl(lft)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ){
    		 				 if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break; 
    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
    		 }
    		//onEvent
    		if( currentEvent.getEventId().equals("local_ctrl") ){
    		 		String parg = "";
    		 		/* SwitchPlan */
    		 		parg =  updateVars(  Term.createTerm("ctrl(CMD)"), Term.createTerm("ctrl(rgt)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ){
    		 				 if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break; 
    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
    		 }
    		//onEvent
    		if( currentEvent.getEventId().equals("local_ctrl") ){
    		 		String parg = "";
    		 		/* SwitchPlan */
    		 		parg =  updateVars(  Term.createTerm("ctrl(CMD)"), Term.createTerm("ctrl(stp)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ){
    		 				 if( ! planUtils.switchToPlan("ctrlStop").getGoon() ) break; 
    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
    		 }
    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=controlTaken WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleReleaseControl() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "handleReleaseControl";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "handleReleaseControl";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//stop
    		//if( ! execRobotMove("handleReleaseControl","stop",0,0,0, "" , "") ) break;
    		    aar = execRobotMove("handleReleaseControl","stop",0,0,0, "" , "");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "handleReleaseControl";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		if( ! planUtils.switchToPlan("controlReleasedStandby").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleReleaseControl WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean controlReleasedStandby() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "controlReleasedStandby";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "controlReleasedStandby";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//senseEvent
    		aar = planUtils.senseEvents( 5000,"local_takeControl,local_alarm","handleTakeControl,handleAlarmControl",
    		"" , "",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=controlReleasedStandby WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean ctrlForward() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "ctrlForward";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "ctrlForward";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//forward
    		//if( ! execRobotMove("ctrlForward","forward",100,0,60000, "sonarDetect,local_alarm,local_releaseControl,local_ctrl" , "ctrlStop,handleAlarmControl,handleReleaseControl,controlTaken") ) break;
    		    aar = execRobotMove("ctrlForward","forward",100,0,60000, "sonarDetect,local_alarm,local_releaseControl,local_ctrl" , "ctrlStop,handleAlarmControl,handleReleaseControl,controlTaken");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "ctrlForward";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=ctrlForward WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleAlarmControl() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "handleAlarmControl";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "handleAlarmControl";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( ! planUtils.switchToPlan("ctrlStop").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleAlarmControl WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean ctrlStop() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "ctrlStop";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "ctrlStop";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//stop
    		//if( ! execRobotMove("ctrlStop","stop",0,0,0, "" , "") ) break;
    		    aar = execRobotMove("ctrlStop","stop",0,0,0, "" , "");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "ctrlStop";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		if( ! planUtils.switchToPlan("controlTaken").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=ctrlStop WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean ctrlBackward() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "ctrlBackward";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "ctrlBackward";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		if( ! planUtils.switchToPlan("ctrlForward").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=ctrlBackward WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleAlarm() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "handleAlarm";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "handleAlarm";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//stop
    		//if( ! execRobotMove("handleAlarm","stop",0,0,0, "" , "") ) break;
    		    aar = execRobotMove("handleAlarm","stop",0,0,0, "" , "");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "handleAlarm";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		//senseEvent
    		aar = planUtils.senseEvents( 10000,"local_start","continue",
    		"" , "",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    		//onEvent
    		if( currentEvent.getEventId().equals("local_start") ){
    		 		String parg = "\"[ROVER] resuming From Alarm\"";
    		 		/* Print */
    		 		parg =  updateVars( Term.createTerm("start"), Term.createTerm("start"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ) println( parg );  
    		 }
    		else{ if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
    		}
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleAlarm WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean goForward() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "goForward";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "goForward";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//forward
    		//if( ! execRobotMove("goForward","forward",100,0,60000, "local_sonar2Support,sonarDetect,local_alarm,local_takeControl" , "handleSonar2Support,handleObstacle,handleAlarm,handleTakeControl") ) break;
    		    aar = execRobotMove("goForward","forward",100,0,60000, "local_sonar2Support,sonarDetect,local_alarm,local_takeControl" , "handleSonar2Support,handleObstacle,handleAlarm,handleTakeControl");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "goForward";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=goForward WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleSonar2Support() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "handleSonar2Support";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "handleSonar2Support";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goLeft" )) != null ){
    		temporaryStr = "\"[ROVER] goLeft Rule Deleted!\"";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		println( temporaryStr );  
    		}
    		//onEvent
    		if( currentEvent.getEventId().equals("local_sonar2Support") ){
    		 		//println("WARNING: variable substitution not yet implmented " ); 
    		 		//stop
    		 		//if( ! execRobotMove("handleSonar2Support","stop",0,0,0, "" , "") ) break;
    		 		    aar = execRobotMove("handleSonar2Support","stop",0,0,0, "" , "");
    		 		    if( aar.getInterrupted() ){
    		 		    	curPlanInExec   = "handleSonar2Support";
    		 		    	if( ! aar.getGoon() ) break;
    		 		    } 			
    		 }
    		//onEvent
    		if( currentEvent.getEventId().equals("local_sonar2Support") ){
    		 		String parg = "";
    		 		/* SwitchPlan */
    		 		parg =  updateVars(  Term.createTerm("sonar2Support(TARGETNAME,DISTANCE)"), Term.createTerm("sonar2Support(wall_e,D)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ){
    		 				 if( ! planUtils.switchToPlan("goalLine").getGoon() ) break; 
    		 			}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
    		 }
    		//we should restore nPlanIter and curPlanInExec of the 'interrupted' plan ???
    		returnValue = continueWork;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleSonar2Support WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean goalLine() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "goalLine";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "goalLine";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "\"[ROVER] I'm on the GoalLine.\"";
    		println( temporaryStr );  
    		//onEvent
    		if( currentEvent.getEventId().equals("local_sonar2Support") ){
    		 		String parg = "actorOp(chooseDirection(D))";
    		 		/* ActorOp */
    		 		parg =  updateVars( Term.createTerm("sonar2Support(TARGETNAME,DISTANCE)"), Term.createTerm("sonar2Support(wall_e,D)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 		if( parg != null ){
    		 			aar = solveGoalReactive(parg,3600000,"","");
    		 			//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		 			if( aar.getInterrupted() ){
    		 				curPlanInExec   = "goalLine";
    		 				if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    		 				if( ! aar.getGoon() ) break;
    		 			} 			
    		 		}
    		 }
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,0)" )) != null ){
    		if( ! planUtils.switchToPlan("goal").getGoon() ) break;
    		}
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,1)" )) != null ){
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		}
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,2)" )) != null ){
    		if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break;
    		}
    		if( ! planUtils.switchToPlan("reachFinalPosition").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=goalLine WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean reachFinalPosition() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "reachFinalPosition";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "reachFinalPosition";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//forward
    		//if( ! execRobotMove("reachFinalPosition","forward",100,0,20000, "local_goal,local_alarm,local_takeControl" , "goal,handleAlarm,handleTakeControl") ) break;
    		    aar = execRobotMove("reachFinalPosition","forward",100,0,20000, "local_goal,local_alarm,local_takeControl" , "goal,handleAlarm,handleTakeControl");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "reachFinalPosition";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		if( planUtils.repeatPlan(nPlanIter,0).getGoon() ) continue;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=reachFinalPosition WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean goal() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "goal";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "goal";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "\"[ROVER] point B reached!!\"";
    		println( temporaryStr );  
    		//right
    		//if( ! execRobotMove("goal","right",100,0,3000, "" , "") ) break;
    		    aar = execRobotMove("goal","right",100,0,3000, "" , "");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "goal";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		parg = "actorOp(exit)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "goal";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=goal WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleObstacle() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "handleObstacle";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "handleObstacle";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//onEvent
    		if( currentEvent.getEventId().equals("sonarDetect") ){
    		 		//println("WARNING: variable substitution not yet implmented " ); 
    		 		//stop
    		 		//if( ! execRobotMove("handleObstacle","stop",0,0,0, "" , "") ) break;
    		 		    aar = execRobotMove("handleObstacle","stop",0,0,0, "" , "");
    		 		    if( aar.getInterrupted() ){
    		 		    	curPlanInExec   = "handleObstacle";
    		 		    	if( ! aar.getGoon() ) break;
    		 		    } 			
    		 }
    		if( ! planUtils.switchToPlan("typeOfObstacle").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleObstacle WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean typeOfObstacle() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "typeOfObstacle";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "typeOfObstacle";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?senseTimeFixedObstacle(T)" )) != null ){
    		//senseEvent
    		aar = planUtils.senseEvents( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'","")),"noMoreObstacle","mobileObstacle",
    		"local_alarm,local_takeControl" , "handleAlarm,handleTakeControl",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    		}
    		if( ! planUtils.switchToPlan("fixedObstacle").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=typeOfObstacle WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean mobileObstacle() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "mobileObstacle";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "mobileObstacle";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( ! planUtils.switchToPlan("goForward").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=mobileObstacle WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean turnRight90() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "turnRight90";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "turnRight90";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?rotationTimeRight(T)" )) != null ){
    		//right
    		//if( ! execRobotMove("turnRight90","right",100,0,Integer.parseInt(guardVars.get("T")), "" , "") ) break;
    		    aar = execRobotMove("turnRight90","right",100,0,Integer.parseInt(guardVars.get("T")), "" , "");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "turnRight90";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		}
    		//we should restore nPlanIter and curPlanInExec of the 'interrupted' plan ???
    		returnValue = continueWork;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=turnRight90 WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean turnLeft90() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "turnLeft90";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "turnLeft90";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?rotationTimeLeft(T)" )) != null ){
    		//left
    		//if( ! execRobotMove("turnLeft90","left",100,0,Integer.parseInt(guardVars.get("T")), "" , "") ) break;
    		    aar = execRobotMove("turnLeft90","left",100,0,Integer.parseInt(guardVars.get("T")), "" , "");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "turnLeft90";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		}
    		//we should restore nPlanIter and curPlanInExec of the 'interrupted' plan ???
    		returnValue = continueWork;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=turnLeft90 WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean fixedObstacle() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "fixedObstacle";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "fixedObstacle";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?goLeft" )) != null ){
    		if( ! planUtils.switchToPlan("findTheDoorLeft").getGoon() ) break;
    		}
    		if( ! planUtils.switchToPlan("findTheDoorRight").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=fixedObstacle WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean findTheDoorRight() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "findTheDoorRight";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "findTheDoorRight";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		parg = "actorOp(incAttemptRight)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "findTheDoorRight";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?searchTimeForward(T)" )) != null ){
    		//forward
    		//if( ! execRobotMove("findTheDoorRight","forward",100,0,Integer.parseInt(guardVars.get("T")), "sonarDetect,local_alarm,local_takeControl" , "deadEndRight,handleAlarm,handleTakeControl") ) break;
    		    aar = execRobotMove("findTheDoorRight","forward",100,0,Integer.parseInt(guardVars.get("T")), "sonarDetect,local_alarm,local_takeControl" , "deadEndRight,handleAlarm,handleTakeControl");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "findTheDoorRight";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		}
    		if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break;
    		//senseEvent
    		aar = planUtils.senseEvents( 500,"sonarDetect","handleObstacle",
    		"" , "",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    		if( ! planUtils.switchToPlan("goForward").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=findTheDoorRight WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean findTheDoorLeft() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "findTheDoorLeft";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "findTheDoorLeft";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break;
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?searchTimeForward(T)" )) != null ){
    		//forward
    		//if( ! execRobotMove("findTheDoorLeft","forward",100,0,Integer.parseInt(guardVars.get("T")), "sonarDetect,local_alarm,local_takeControl" , "deadEndLeft,handleAlarm,handleTakeControl") ) break;
    		    aar = execRobotMove("findTheDoorLeft","forward",100,0,Integer.parseInt(guardVars.get("T")), "sonarDetect,local_alarm,local_takeControl" , "deadEndLeft,handleAlarm,handleTakeControl");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "findTheDoorLeft";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		}
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		//senseEvent
    		aar = planUtils.senseEvents( 500,"sonarDetect","handleObstacle",
    		"" , "",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    		if( ! planUtils.switchToPlan("goForward").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=findTheDoorLeft WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean deadEndRight() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "deadEndRight";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "deadEndRight";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "goLeft";
    		addRule( temporaryStr );  
    		if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break;
    		//delay
    		aar = delayReactive(1000,"local_alarm,local_takeControl" , "handleAlarm,handleTakeControl");
    		if( aar.getInterrupted() ) curPlanInExec   = "deadEndRight";
    		if( ! aar.getGoon() ) break;
    		if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break;
    		parg = "actorOp(getAttemptRightTotalTime)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "deadEndRight";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?actorOpDone(OP,Result)" )) != null ){
    		temporaryStr = "risultatoTotalTime(Result)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		println( temporaryStr );  
    		}
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,Result)" )) != null ){
    		//forward
    		//if( ! execRobotMove("deadEndRight","forward",100,0,Integer.parseInt(guardVars.get("Result")), "local_alarm,local_takeControl" , "handleAlarm,handleTakeControl") ) break;
    		    aar = execRobotMove("deadEndRight","forward",100,0,Integer.parseInt(guardVars.get("Result")), "local_alarm,local_takeControl" , "handleAlarm,handleTakeControl");
    		    if( aar.getInterrupted() ){
    		    	curPlanInExec   = "deadEndRight";
    		    	if( ! aar.getGoon() ) break;
    		    } 			
    		}
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		//delay
    		aar = delayReactive(1000,"" , "");
    		if( aar.getInterrupted() ) curPlanInExec   = "deadEndRight";
    		if( ! aar.getGoon() ) break;
    		if( ! planUtils.switchToPlan("goForward").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=deadEndRight WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean deadEndLeft() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "deadEndLeft";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "deadEndLeft";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "\"[ROVER] cannot find a door. Terminate.\"";
    		println( temporaryStr );  
    		parg = "actorOp(setAttemptRight(0))";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "deadEndLeft";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??goLeft" )) != null ){
    		temporaryStr = "\"[ROVER] goLeft Rule Deleted!\"";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		println( temporaryStr );  
    		}
    		if( ! planUtils.switchToPlan("hilariousEnd").getGoon() ) break;
    		parg = "actorOp(exit)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "deadEndLeft";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=deadEndLeft WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean hilariousEnd() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "hilariousEnd";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "hilariousEnd";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break;
    		if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break;
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		if( ! planUtils.switchToPlan("turnRight90").getGoon() ) break;
    		if( ! planUtils.switchToPlan("turnLeft90").getGoon() ) break;
    		//we should restore nPlanIter and curPlanInExec of the 'interrupted' plan ???
    		returnValue = continueWork;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=hilariousEnd WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    /* 
    * ------------------------------------------------------------
    * SENSORS
    * ------------------------------------------------------------
    */
    protected void initSensorSystem(){		
    	try {
    		String goal = "consult( \"./src/it/unibo/rover/sensorTheory.pl\" )";
    		SolveInfo sol = QActorUtils.solveGoal( goal ,pengine );
    		if( ! sol.isSuccess() ){
    			//println( "avatar initSensorSystem attempt to load sensorTheory "  );
    			goal = "consult( \"./sensorTheory.pl\" )";
    			QActorUtils.solveGoal( pengine, goal  );
    			//println( "avatar initSensorSystem= "  +  aar.getResult() );
    		}
    		addSensorObservers();
    	} catch (Exception e) {
    		e.printStackTrace();
    	}
    }
    /*
    //COMPONENTS
     RobotComponent motorleft 
     RobotComponent motorright 
    sensor distanceFront  todo  
    Composed component motors
    */
    protected void addSensorObservers(){
    	for (ISensor<?> sensor : Configurator.getInstance().getSensors()) {
    		//println( "rover sensor= "  + sensor.getDefStringRep() );
    		//println( "rover sensor class= "  + sensor.getClass().getName() );
        	if( sensor instanceof DistanceSensor){
        		DistanceSensor sensorDistance  = (DistanceSensor) sensor;
        		ISensorObserver<IDistanceSensorData> obs = new SensorObserver<IDistanceSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorDistance.getDefStringRep() );
        		sensorDistance.addObserver(  obs  ) ;
        	}
        	if( sensor instanceof LineSensor){
        		LineSensor sensorLine = (LineSensor) sensor;
         		ISensorObserver<ILineSensorData> obs = new SensorObserver<ILineSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorLine.getDefStringRep() );
        		sensorLine.addObserver(  obs  ) ;
        	}
         	if( sensor instanceof MagnetometerSensor){
        		MagnetometerSensor sensorMagneto = (MagnetometerSensor) sensor;
         		ISensorObserver<IMagnetometerSensorData> obs = new SensorObserver<IMagnetometerSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorMagneto.getDefStringRep() );
        		sensorMagneto.addObserver(  obs  ) ;
        	}
    		if( sensor instanceof ImpactSensor){
    			ImpactSensor sensorImpact = (ImpactSensor) sensor;
    			ISensorObserver<IImpactSensorData> obs = new SensorObserver<IImpactSensorData>(this,outEnvView);
    	//		println( "avatar add observer to  "  + sensorMagneto.getDefStringRep() );
    			sensorImpact.addObserver(  obs  ) ;
    		}
    	}		
    }	
    
 
	/* 
	* ------------------------------------------------------------
	* APPLICATION ACTIONS
	* ------------------------------------------------------------
	*/
	/* 
	* ------------------------------------------------------------
	* QUEUE  
	* ------------------------------------------------------------
	*/
	    protected void getMsgFromInputQueue(){
//	    	println( " %%%% getMsgFromInputQueue" ); 
	    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
	    	this.currentMessage = msg;
	    }
  }

