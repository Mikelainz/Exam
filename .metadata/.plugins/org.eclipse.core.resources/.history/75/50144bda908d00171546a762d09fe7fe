/* Generated by AN DISI Unibo */ 
package it.unibo.rover;

import java.util.Date;

import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.QActorContext;

public class Rover extends AbstractRover {
	
	private SingletonConfigurations configurations;
	private int da;
	private int attemptRight;
	private long startTimeForward;
	
	public Rover(String actorId, QActorContext myCtx, IOutputEnvView outEnvView ) throws Exception{
		super(actorId,myCtx,outEnvView ,it.unibo.qactors.QActorUtils.robotBase );
		this.attemptRight = 0;
		configurations = SingletonConfigurations.getInstance();
	}
	
	public void createRobotUnity() {
		createSimulatedActor("Prefabs/CustomActor", (float)-33.7, 0, 10, 0, 0, 0, 0);
	}
	
	public int getRotationTimeRight() {
		return configurations.getRotationTimeRight();
	}

	public int getRotationTimeLeft() {
		return configurations.getRotationTimeLeft();
	}

	public int getSearchTimeForward() {
		return configurations.getSearchTimeForward();
	}

	public int getSenseTimeFixedObstacle() {
		return configurations.getSenseTimeFixedObstacle();
	}

	public int getFinalPointTollerance() {
		return configurations.getFinalPointTollerance();
	}
	
	public int getAttemptRightTotalTime() {
		return this.attemptRight*this.getSearchTimeForward();
	}

	public void setAttemptRight(int attemptRight) {
		this.attemptRight = attemptRight;
	}
	
	public void incAttemptRight() {
		this.attemptRight++;
		System.out.println("[ROVER] attempt right: " + this.attemptRight);
	}

	public void decAttemptRight() {
		if(this.attemptRight>0) this.attemptRight--;
		System.out.println("[ROVER] attempt right: " + this.attemptRight);
	}
	
	public void setDa(int da) {
		this.da = da;
	}
	
	public int chooseDirection(int currentPoint) {
		int difference = da-currentPoint;
		if ( Math.abs(difference) <= this.getFinalPointTollerance()  ) 
			return 0;									//stay there
		else if (difference > 0)		
			return 1;									//go DX
		else // (difference < 0)	
			return 2;									//go SX
	}
	
	public void exit() {
		System.exit(1);
	}
	
	public void saveStart() {
		this.startTimeForward = new Date().getTime();
	}
	
}
