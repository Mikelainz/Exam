RobotSystem rover_wall_e_sys
                     
Event usercmd : usercmd(robotgui(CMD)) 	//(FORWARD button) CMD w(low)
Event local_start : start
Event local_alarm : alarm
Event local_takeControl : takeControl
Event local_releaseControl : releaseControl
Event local_ctrl : ctrl(CMD)

Event sonar : sonar(SONARID,TARGETNAME,DISTANCE) //EVENT ENVIRONMENT SONAR1&2
Event local_sonar2Support : sonar2Support(TARGETNAME,DISTANCE)
Event local_goal : goal

Event obstacle : obstacle(DISTANCE)      
Event noMoreObstacle : noMoreObstacle(DISTANCE)

Dispatch daValue : daValue(DA)



Context  ctxRobot  ip [ host="192.168.43.101" port=8070 ] -httpserver
Context  ctxSonar1  ip [ host="192.168.43.74" port=8100 ]
Context  ctxSonar2  ip [ host="localhost" port=8090 ]  

QActor sonar1 context ctxSonar1 {
	
	Rules {
		testNear(Distance):-retract(actorOpDone(OP, Distance)), eval(lt, Distance, 200).
	}
	
	Plan init normal
			println("[SONAR1] STARTS");
			actorOp startSonarProcess;
			switchToPlan work;
			println("[SONAR1] ENDS")
			
	Plan work 
			delay time(50);
			actorOp getDistanceFromSonar;
			[ !? testNear(Distance) ] emit sonar:sonar(sonar1, wall_e, Distance);
			repeatPlan
	
}
 
QActor sonar2 context ctxSonar2 {
	Rules {
		testNear(Distance):-retract(actorOpDone(OP, Distance)), eval(lt, Distance, 200).
	}
	
	Plan init normal
			println("[SONAR2] STARTS");
			actorOp startSonarProcess;
			switchToPlan work;
			println("[SONAR2] ENDS")
			
	Plan work 
			delay time(50);
			actorOp getDistanceFromSonar;
			[ !? testNear(Distance) ] emit sonar:sonar(sonar2, wall_e, Distance);
			repeatPlan
}

QActor sonarsupport context ctxRobot {
	
	Plan init normal
			println("[SONAR_SUPPORT] STARTS");
			switchToPlan configDa;
			switchToPlan work;
			println("[SONAR_SUPPORT] ENDS")
			
	Plan work
			sense time(60000) sonar -> handleSonar;
			repeatPlan
			
	Plan handleSonar
//			onEvent sonar : sonar(sonar1, wall_e, D) -> switchToPlan handleSonar1;
			onEvent sonar : sonar(sonar2, wall_e, D) -> switchToPlan handleSonar2;
			resumeLastPlan
	
	Plan handleSonar2
			onEvent sonar : sonar(sonar2, wall_e, D) -> emit local_sonar2Support : sonar2Support(wall_e, D);
		 	onEvent sonar : sonar(sonar2, wall_e, D) -> actorOp goalTest(D);
		 	[ !? actorOpDone(OP, true) ] println("[SONAR_SUPPORT] emitting local_goal");
   			[ ?? actorOpDone(OP, true) ] emit local_goal : goal;
   			resumeLastPlan
   	
   	Plan configDa
   			sense time(60000) sonar -> continue;
   			onEvent sonar : sonar(sonar1, wall_e, D) -> addRule da(D);
   			[ !? da(DA) ] println(daSettedAt(DA)) else repeatPlan;
   			[ !? da(DA) ] actorOp setDa(D);
   			[ !? da(DA) ] forward rover -m daValue : daValue(D);
   			resumeLastPlan
} 

QActor usercmdsupport context ctxRobot {
	
	Plan init normal
			println("[USERCMD_SUPPORT] STARTS");
			switchToPlan work;
			println("[USERCMD_SUPPORT] ENDS")
			
	Plan work
			sense time(60000) usercmd -> handleUserCmd;
			repeatPlan
			
	Plan handleUserCmd
			onEvent usercmd : usercmd(robotgui(start))			-> emit local_start : start;
			onEvent usercmd : usercmd(robotgui(alarm))		 	-> emit local_alarm : alarm;
			onEvent usercmd : usercmd(robotgui(takecontrol)) 	-> emit local_takeControl : takeControl;
			onEvent usercmd : usercmd(robotgui(fwd))		 	-> emit local_ctrl : ctrl(fwd); 	
			onEvent usercmd : usercmd(robotgui(bwd))		 	-> emit local_ctrl : ctrl(bwd);
			onEvent usercmd : usercmd(robotgui(lft))		 	-> emit local_ctrl : ctrl(lft);
			onEvent usercmd : usercmd(robotgui(rgt))		 	-> emit local_ctrl : ctrl(rgt);
			onEvent usercmd : usercmd(robotgui(stp))		 	-> emit local_ctrl : ctrl(stp); 		
			onEvent usercmd : usercmd(robotgui(releasecontrol))	-> emit local_releaseControl : releaseControl; 			
			resumeLastPlan
}

Robot wall_e QActor rover context ctxRobot {
   	
	Plan init normal
 			println("[ROVER] STARTS");           
  			//---------UNITY----------
  			//Metodo 1 unity
  			//actorOp workWithUnity("127.0.0.1");//connects to port 6000 192.168.43.229"
			//Metodo 2 unity
			//actorOp initUnityConnection("192.168.0.3");
			//actorOp createRobotUnity;
			//---------UNITY----------
			switchToPlan config;
      		switchToPlan standby;  
			delay time(6000000); 
   			println("[ROVER] ENDS")                      

	Plan config
			actorOp setAttemptRight(0);
			actorOp getRotationTimeRight;
			[ ?? actorOpDone(OP, RTR) ] addRule rotationTimeRight(RTR);
			actorOp getRotationTimeLeft;
			[ ?? actorOpDone(OP, RTL) ] addRule rotationTimeLeft(RTL);
			actorOp getSearchTimeForward;
			[ ?? actorOpDone(OP, STF) ] addRule searchTimeForward(STF);
			actorOp getSenseTimeFixedObstacle;
			[ ?? actorOpDone(OP, STFO) ] addRule senseTimeFixedObstacle(STFO);
			actorOp getFinalPointTollerance;
			[ ?? actorOpDone(OP, FPT) ] addRule finalPointTollerance(FPT);			
			//Waiting for DA
			receiveMsg time(10000);
			onMsg daValue : daValue(DA) -> addRule da(DA);
			onMsg daValue : daValue(DA) -> actorOp setDa(DA);
			[ !? da(X) ] resumeLastPlan else repeatPlan
			
	Plan standby  				  
			println("[ROVER] waits to start.");
			delay time(10000) react event local_start 		-> handleStart
							  or	event local_takeControl -> handleTakeControl
							  or 	event local_alarm		-> handleAlarm;
			repeatPlan 	

	Plan handleStart  
   			switchToPlan goForward;
   			resumeLastPlan
   			
   	Plan handleTakeControl
   			robotStop speed(0) time(0);
   			switchToPlan controlWork
   			
   	Plan controlWork
   	//per ora non è sensibile ad alarm
   			sense time (10000) local_ctrl -> continue react event local_releaseControl -> handleReleaseControl
   													  or 	event local_alarm 		   -> handleAlarmControl; 
   			onEvent local_ctrl : ctrl(fwd) -> switchToPlan ctrlForward;
   			onEvent local_ctrl : ctrl(bwd) -> switchToPlan ctrlBackward;
   			onEvent local_ctrl : ctrl(lft) -> switchToPlan turnLeft90;
   			onEvent local_ctrl : ctrl(rgt) -> switchToPlan turnRight90;
   			onEvent local_ctrl : ctrl(stp) -> switchToPlan ctrlStop;
   			repeatPlan
   			//when release control is pressed resumeLastPlan (handleTakeControl) that ends.
   		
   	Plan handleReleaseControl 
   			robotStop speed(0) time(0); 
   			switchToPlan controlReleasedStandby
   			
   	Plan controlReleasedStandby
   			sense time(5000) local_takeControl,local_alarm -> handleTakeControl,handleAlarmControl;
   			repeatPlan
   			
   	Plan ctrlForward
   			robotForward speed(100) time(60000) react event obstacle 				-> ctrlStop
	   											or 	  event local_alarm 			-> handleAlarmControl
	   											or	  event local_releaseControl	-> handleReleaseControl
	   											or	  event local_ctrl				-> controlWork;
			repeatPlan
			
	Plan handleAlarmControl 
			switchToPlan ctrlStop 
			
	Plan ctrlStop		
			robotStop speed(0) time(0); 
			switchToPlan controlWork
			
   	Plan ctrlBackward
   			switchToPlan turnRight90;
   			switchToPlan turnRight90;
   			switchToPlan ctrlForward
   			 
	Plan handleAlarm 
			robotStop speed(0) time(0); 
			sense time(10000) local_start -> continue; //Non è sensibile ai comandi della takecontrol
			onEvent local_start : start -> println("[ROVER] resuming From Alarm") else repeatPlan
			
	Plan goForward 
   			robotForward speed(100) time(60000) react event local_sonar2Support -> handleSonar2Support 
	   											or    event obstacle -> handleObstacle
	   											or 	  event local_alarm -> handleAlarm
	   											or	  event local_takeControl -> handleTakeControl;
			repeatPlan
	   											
	Plan handleSonar2Support
   			[ ?? goLeft ] println("[ROVER] goLeft Rule Deleted!");
   			onEvent local_sonar2Support : sonar2Support(wall_e, D) -> robotStop speed(0) time(0);
   			onEvent local_sonar2Support : sonar2Support(wall_e, D) -> switchToPlan goalLine;
   			resumeLastPlan
   			
   	Plan goalLine
   			println("[ROVER] I'm on the GoalLine.");
   			onEvent local_sonar2Support : sonar2Support(wall_e, D) -> actorOp chooseDirection(D);
   			[ ?? actorOpDone(OP, 0) ] switchToPlan goal;
   			[ ?? actorOpDone(OP, 1) ] switchToPlan turnRight90;
   			[ ?? actorOpDone(OP, 2) ] switchToPlan turnLeft90;
   			switchToPlan reachFinalPosition
   	
   	Plan reachFinalPosition
   			robotForward speed(100) time(20000) react event local_goal -> goal 
   												or 	  event local_alarm -> handleAlarm
   												or	  event local_takeControl -> handleTakeControl;
   			repeatPlan
   			
   	Plan goal
   			println("[ROVER] point B reached!!");
   			robotRight speed(100) time(3000);
   			actorOp exit
   			
   	Plan handleObstacle
   			onEvent obstacle : obstacle(DISTANCE) -> robotStop speed(0) time(0);
   			switchToPlan typeOfObstacle
   			
   	Plan typeOfObstacle
   			[ !? senseTimeFixedObstacle(T) ] sense time (T) noMoreObstacle -> mobileObstacle 
   												react event local_alarm -> handleAlarm
   												or	  event local_takeControl -> handleTakeControl;
   			switchToPlan fixedObstacle
   			
   	Plan mobileObstacle
   			switchToPlan goForward	
   			
   	Plan turnRight90
   			[ !? rotationTimeRight(T) ] robotRight speed(100) time(T);
   			resumeLastPlan
   			
   	Plan turnLeft90
   			[ !? rotationTimeLeft(T) ] robotLeft speed(100) time(T);
   			resumeLastPlan
   			
   	Plan fixedObstacle
   			[ !? goLeft ] switchToPlan findTheDoorLeft;
	   		switchToPlan findTheDoorRight
	   		
   	Plan findTheDoorRight
   			actorOp incAttemptRight;
   			switchToPlan turnRight90;
   			[ !? searchTimeForward(T) ] robotForward speed(100) time(T) react event obstacle -> deadEndRight 
   																		or 	  event local_alarm -> handleAlarm
   																		or	  event local_takeControl -> handleTakeControl;
   			switchToPlan turnLeft90;
   			sense time (500) obstacle -> handleObstacle;
   			switchToPlan goForward
   			
   	Plan findTheDoorLeft
   	   		switchToPlan turnLeft90;
   			[ !? searchTimeForward(T) ] robotForward speed(100) time(T) react event obstacle -> deadEndLeft
   																		or	  event local_alarm -> handleAlarm
   																		or	  event local_takeControl -> handleTakeControl;
   			switchToPlan turnRight90;
   			sense time (500) obstacle -> handleObstacle;
   			switchToPlan goForward
   			
   	Plan deadEndRight
   			addRule goLeft;
   			switchToPlan turnLeft90;
   			delay time(1000) react event local_alarm -> handleAlarm
   							 or	  event local_takeControl -> handleTakeControl;
   			switchToPlan turnLeft90;
   			actorOp getAttemptRightTotalTime;
   			[ !? actorOpDone(OP, Result) ] println(risultatoTotalTime(Result));
   			[ ?? actorOpDone(OP, Result) ] robotForward speed(100) time(Result) react event local_alarm -> handleAlarm
   																				or	  event local_takeControl -> handleTakeControl;
   			switchToPlan turnRight90;
   			delay time(1000);
   			switchToPlan goForward
   			
   	Plan deadEndLeft
   			println("[ROVER] cannot find a door. Terminate.");
   			actorOp setAttemptRight(0);
   			[ ?? goLeft ] println("[ROVER] goLeft Rule Deleted!");
   			switchToPlan hilariousEnd;
   			actorOp exit
   			
   	Plan hilariousEnd
   			switchToPlan turnRight90;
   			switchToPlan turnLeft90;
   			switchToPlan turnLeft90;
   			switchToPlan turnRight90;
   			switchToPlan turnRight90;
   			switchToPlan turnLeft90;
   			resumeLastPlan
   					   			 			
}